// FINS grammar
?start: command_chain | function_definition | help_command

command_chain: command ("->" command)*

?command: sort_command
        | filter_command
        | sequence
        | column_command
        | info_command
        | operation_command
        | drop_command

// Help system
help_command: "?" [help_topic]
help_topic: NAME | "." NAME | "." | "*" | "operators" | "syntax" | "functions" | "persistence" | "variables"

// Column operations
column_command: [column_assignment] column_function
column_assignment: "." NAME "=" WS*
column_function: "." NAME "(" [arg_list] ")"
drop_command: "drop" "(" column_ref ("," WS* column_ref)* ")"

// Operation commands (like sort)
sort_command: "sort" "(" column_ref ("," WS* named_arg)* ")"
filter_command: "filter" "(" column_ref ("," WS* named_arg)* ")"

// Arguments
arg_list: named_arg ("," WS* named_arg)*
named_arg: NAME "=" value
value: NUMBER | STRING | NAME | column_ref
column_ref: "." NAME

// Operation command (for pipeline operations)
operation_command: OPERATOR operand_group

// Generic expression handling
?sequence: operand_group (OPERATOR operand_group)*
operand_group: operand+
?operand: WEIGHT? (symbol | variable)

// Variables and symbols
variable: VARIABLE
symbol: STOCK_SYMBOL | ETF_SYMBOL | INDEX_SYMBOL

// Operators
OPERATOR: "+" | "-" | "&"

// Terminal symbols
STOCK_SYMBOL: /[A-Z][A-Z0-9]*/
ETF_SYMBOL: /[A-Z][A-Z0-9]*/
INDEX_SYMBOL: /\^[A-Z][A-Z0-9]*/
VARIABLE: /[\$\/][a-zA-Z0-9_\/]+/
WEIGHT: /[0-9]+(\.[0-9]+)?x?/
NUMBER: /[0-9]+(\.[0-9]+)?[KMBT%]?/
STRING: /"[^"]*"/
NAME: /[a-zA-Z_][a-zA-Z0-9_]*/

// Ignore whitespace and comments
%ignore /[ \t\f\r\n]+/
%ignore /\/\/[^\n]*/
